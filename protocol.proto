syntax = "proto3";
package kadiradb;

//   Types
// ---------

message Request {
  oneof request {
    InfoReq infoReq = 1;
    OpenReq openReq = 2;
    EditReq editReq = 3;
    PutReq putReq = 4;
    IncReq incReq = 5;
    GetReq getReq = 6;
  }
}

message ReqBatch {
  repeated Request batch = 1;
}

message Response {
  oneof response {
    InfoRes infoRes = 1;
    OpenRes openRes = 2;
    EditRes editRes = 3;
    PutRes putRes = 4;
    IncRes incRes = 5;
    GetRes getRes = 6;
  }
}

message ResBatch {
  repeated Response batch = 1;
}

message InfoReq {
  // no fields
}

message InfoRes {
  repeated DBInfo databases = 1;
}

message DBInfo {
  string database = 1;
  uint32 resolution = 2;
  uint32 retention = 3;
}

message OpenReq {
  string database = 1;
  uint32 resolution = 2;
  uint32 retention = 3;
	uint32 epochTime = 4;
	uint32 maxROEpochs = 5;
	uint32 maxRWEpochs = 6;
}

message OpenRes {
  // no fields
}

message EditReq {
  string database = 1;
  uint32 retention = 2;
	uint32 maxROEpochs = 3;
	uint32 maxRWEpochs = 4;
}

message EditRes {
  // no fields
}

message PutReq {
  string database = 1;
  uint32 timestamp = 2;
  double value = 3;
  uint32 count = 4;
  repeated string fields = 5;
}

message PutRes {
  // no fields
}

message IncReq {
  string database = 1;
  uint32 timestamp = 2;
  double value = 3;
  uint32 count = 4;
  repeated string fields = 5;
}

message IncRes {
  // no fields
}

message GetReq {
  string database = 1;
  uint32 startTime = 2;
  uint32 endTime = 3;
  repeated string fields = 4;
  repeated bool groupBy = 5 [packed=true];
}

message GetRes {
  repeated ResSeries groups = 2;
}

message ResSeries {
  repeated string fields = 1;
  repeated ResPoint points = 2;
}

message ResPoint {
  double value = 1;
  uint32 count = 2;
}

message MetricsReq {
  // no fields
}

message MetricsRes {
  map<string, DatabaseMetrics> databases = 1;
}

message DatabaseMetrics {
  map<int64, EpochMetrics> rEpochs = 1;
  map<int64, EpochMetrics> wEpochs = 2;
}

message EpochMetrics {
	IndexMetrics index = 1;
	BlockMetrics block = 2;
}

message IndexMetrics {
  int64 mMapSize = 1;
	int64 dataSize = 2;
	int64 nodes = 3;
	int64 items = 4;
	int64 oneOps = 5;
	int64 putOps = 6;
	int64 getOps = 7;
}

message BlockMetrics {
  int64 mapped = 1;
  int64 locked = 2;
  int64 capacity = 3;
  int64 segments = 4;
  int64 records = 5;
  int64 addOps = 6;
  int64 putOps = 7;
  int64 getOps = 8;
}
